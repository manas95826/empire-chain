{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Empire Chain Documentation","text":"<p>Welcome to Empire Chain, a powerful framework for building AI-powered data processing pipelines and applications.</p>"},{"location":"#overview","title":"Overview","text":"<p>Empire Chain is a Python framework that simplifies the process of building complex AI applications. It provides tools and utilities for:</p> <ul> <li>Document processing and analysis</li> <li>Large Language Model (LLM) integration</li> <li>Data visualization</li> <li>RAG (Retrieval Augmented Generation) implementations</li> <li>PDF and image processing capabilities</li> <li>Chatbot development</li> </ul>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Document Processing: Easily process and analyze various document formats</li> <li>LLM Integration: Seamless integration with popular language models</li> <li>Visualization Tools: Built-in tools for data visualization</li> <li>RAG Support: Build sophisticated retrieval-augmented generation systems</li> <li>Multi-modal Support: Handle text, PDFs, and images with ease</li> <li>Extensible Architecture: Build custom components and pipelines</li> </ul>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>Installation Guide</li> <li>Quick Start Tutorial</li> <li>Core Concepts</li> <li>API Reference</li> <li>Contributing Guidelines</li> </ul>"},{"location":"#license","title":"License","text":"<p>Empire Chain is released under the MIT License. See the LICENSE file for more details. </p>"},{"location":"getting-started/installation/","title":"Installation Guide","text":""},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing Empire Chain, ensure you have the following prerequisites:</p> <ul> <li>Python 3.8 or higher</li> <li>pip (Python package installer)</li> <li>Virtual environment (recommended)</li> </ul>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"getting-started/installation/#1-using-pip-recommended","title":"1. Using pip (Recommended)","text":"<pre><code>pip install empire-chain\n</code></pre>"},{"location":"getting-started/installation/#2-from-source","title":"2. From Source","text":"<p>To install the latest development version:</p> <pre><code>git clone https://github.com/yourusername/empire-chain.git\ncd empire-chain\npip install -e .\n</code></pre>"},{"location":"getting-started/installation/#3-development-installation","title":"3. Development Installation","text":"<p>For development purposes, install with additional dependencies:</p> <pre><code>pip install -e \".[dev]\"\n</code></pre>"},{"location":"getting-started/installation/#verifying-installation","title":"Verifying Installation","text":"<p>You can verify your installation by running:</p> <pre><code>import empire_chain\nprint(empire_chain.__version__)\n</code></pre>"},{"location":"getting-started/installation/#dependencies","title":"Dependencies","text":"<p>Empire Chain has the following core dependencies:</p> <ul> <li>numpy</li> <li>pandas</li> <li>torch</li> <li>transformers</li> <li>streamlit</li> <li>langchain</li> <li>pillow</li> <li>matplotlib</li> </ul> <p>These will be automatically installed when you install Empire Chain.</p>"},{"location":"getting-started/installation/#optional-dependencies","title":"Optional Dependencies","text":"<p>Some features require additional dependencies:</p>"},{"location":"getting-started/installation/#for-pdf-processing","title":"For PDF Processing","text":"<pre><code>pip install \"empire-chain[pdf]\"\n</code></pre>"},{"location":"getting-started/installation/#for-image-processing","title":"For Image Processing","text":"<pre><code>pip install \"empire-chain[image]\"\n</code></pre>"},{"location":"getting-started/installation/#for-development","title":"For Development","text":"<pre><code>pip install \"empire-chain[dev]\"\n</code></pre>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Version Conflicts <pre><code>pip install --upgrade empire-chain\n</code></pre></p> </li> <li> <p>Missing Dependencies <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> <li> <p>CUDA Issues    Make sure you have compatible CUDA drivers installed if you plan to use GPU acceleration.</p> </li> </ol> <p>If you encounter any issues, please check our GitHub Issues page or create a new issue. </p>"},{"location":"getting-started/quickstart/","title":"Quick Start Guide","text":"<p>This guide will help you get started with Empire Chain by walking through some basic examples.</p>"},{"location":"getting-started/quickstart/#basic-usage","title":"Basic Usage","text":""},{"location":"getting-started/quickstart/#1-simple-chatbot","title":"1. Simple Chatbot","text":"<p>Create a basic chatbot using Empire Chain:</p> <pre><code>from empire_chain.docling import SimpleChatbot\n\n# Initialize the chatbot\nchatbot = SimpleChatbot()\n\n# Start a conversation\nresponse = chatbot.chat(\"Tell me about artificial intelligence\")\nprint(response)\n</code></pre>"},{"location":"getting-started/quickstart/#2-processing-a-pdf-document","title":"2. Processing a PDF Document","text":"<pre><code>from empire_chain.docling import PDFProcessor\n\n# Initialize the PDF processor\nprocessor = PDFProcessor(\"path/to/document.pdf\")\n\n# Extract text content\ntext = processor.extract_text()\n\n# Get a summary\nsummary = processor.summarize()\n</code></pre>"},{"location":"getting-started/quickstart/#3-chat-with-images","title":"3. Chat with Images","text":"<pre><code>from empire_chain.docling import ImageChat\n\n# Initialize the image chat\nimage_chat = ImageChat()\n\n# Load and analyze an image\nresponse = image_chat.analyze_image(\n    \"path/to/image.jpg\",\n    \"What can you tell me about this image?\"\n)\nprint(response)\n</code></pre>"},{"location":"getting-started/quickstart/#4-visualization-example","title":"4. Visualization Example","text":"<pre><code>from empire_chain.visualizer import DataVisualizer\nimport pandas as pd\n\n# Create sample data\ndata = pd.DataFrame({\n    'x': [1, 2, 3, 4, 5],\n    'y': [2, 4, 6, 8, 10]\n})\n\n# Initialize visualizer\nviz = DataVisualizer(data)\n\n# Create a line plot\nviz.line_plot('x', 'y', title='Sample Plot')\n</code></pre>"},{"location":"getting-started/quickstart/#building-a-rag-application","title":"Building a RAG Application","text":"<p>Here's a complete example of building a Retrieval Augmented Generation (RAG) system:</p> <pre><code>from empire_chain.docling import RAGSystem\nfrom empire_chain.visualizer import RAGVisualizer\n\n# Initialize the RAG system\nrag = RAGSystem()\n\n# Add documents to the knowledge base\nrag.add_documents([\n    \"path/to/doc1.pdf\",\n    \"path/to/doc2.pdf\"\n])\n\n# Query the system\nresponse = rag.query(\"What are the key findings in these documents?\")\n\n# Visualize the retrieval process\nviz = RAGVisualizer(rag)\nviz.show_retrieval_path()\n</code></pre>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Explore the Core Concepts to understand the framework better</li> <li>Check out the Tutorials for more detailed examples</li> <li>Read the API Reference for comprehensive documentation</li> </ul>"},{"location":"getting-started/quickstart/#common-patterns","title":"Common Patterns","text":""},{"location":"getting-started/quickstart/#error-handling","title":"Error Handling","text":"<pre><code>from empire_chain.docling import SimpleChatbot\nfrom empire_chain.exceptions import EmpireChainError\n\ntry:\n    chatbot = SimpleChatbot()\n    response = chatbot.chat(\"Hello\")\nexcept EmpireChainError as e:\n    print(f\"An error occurred: {e}\")\n</code></pre>"},{"location":"getting-started/quickstart/#configuration","title":"Configuration","text":"<pre><code>from empire_chain.docling import SimpleChatbot\n\nconfig = {\n    \"model\": \"gpt-3.5-turbo\",\n    \"temperature\": 0.7,\n    \"max_tokens\": 150\n}\n\nchatbot = SimpleChatbot(config=config)\n</code></pre>"},{"location":"getting-started/quickstart/#async-support","title":"Async Support","text":"<pre><code>import asyncio\nfrom empire_chain.docling import AsyncChatbot\n\nasync def main():\n    chatbot = AsyncChatbot()\n    response = await chatbot.achat(\"Tell me a story\")\n    print(response)\n\nasyncio.run(main())\n</code></pre>"},{"location":"user-guide/core-concepts/","title":"Core Concepts","text":"<p>Empire Chain is built around several core concepts that work together to provide a powerful and flexible framework for AI applications.</p>"},{"location":"user-guide/core-concepts/#document-processing","title":"Document Processing","text":""},{"location":"user-guide/core-concepts/#the-docling-class","title":"The Docling Class","text":"<p>The <code>Docling</code> class is the central component for document processing:</p> <pre><code>from empire_chain.docling import Docling\n\ndoc = Docling(\"document.pdf\")\n</code></pre> <p>Key features: - Document loading and parsing - Text extraction and preprocessing - Metadata handling - Content transformation</p>"},{"location":"user-guide/core-concepts/#language-model-integration","title":"Language Model Integration","text":"<p>Empire Chain provides seamless integration with various Language Models:</p>"},{"location":"user-guide/core-concepts/#model-types","title":"Model Types","text":"<ol> <li>Local Models: Run models directly on your machine</li> <li>API-based Models: Connect to services like OpenAI</li> <li>Custom Models: Integrate your own models</li> </ol>"},{"location":"user-guide/core-concepts/#configuration","title":"Configuration","text":"<pre><code>config = {\n    \"model_type\": \"api\",\n    \"provider\": \"openai\",\n    \"model_name\": \"gpt-3.5-turbo\",\n    \"api_key\": \"your-api-key\"\n}\n</code></pre>"},{"location":"user-guide/core-concepts/#data-structures","title":"Data Structures","text":""},{"location":"user-guide/core-concepts/#document-store","title":"Document Store","text":"<ul> <li>Efficient storage and retrieval of documents</li> <li>Indexing for quick searches</li> <li>Version control and history</li> </ul>"},{"location":"user-guide/core-concepts/#vector-store","title":"Vector Store","text":"<ul> <li>Embedding storage</li> <li>Similarity search</li> <li>Clustering capabilities</li> </ul>"},{"location":"user-guide/core-concepts/#processing-pipeline","title":"Processing Pipeline","text":"<p>The processing pipeline consists of several stages:</p> <ol> <li>Input Processing</li> <li>Document loading</li> <li>Format detection</li> <li> <p>Initial preprocessing</p> </li> <li> <p>Content Extraction</p> </li> <li>Text extraction</li> <li>Structure analysis</li> <li> <p>Metadata collection</p> </li> <li> <p>Analysis</p> </li> <li>Content analysis</li> <li>Feature extraction</li> <li> <p>Entity recognition</p> </li> <li> <p>Output Generation</p> </li> <li>Response formatting</li> <li>Result compilation</li> <li>Export handling</li> </ol>"},{"location":"user-guide/core-concepts/#visualization-system","title":"Visualization System","text":"<p>The visualization system provides tools for:</p> <ul> <li>Data plotting</li> <li>Process monitoring</li> <li>Result analysis</li> <li>Interactive dashboards</li> </ul>"},{"location":"user-guide/core-concepts/#rag-architecture","title":"RAG Architecture","text":"<p>The RAG (Retrieval Augmented Generation) system consists of:</p>"},{"location":"user-guide/core-concepts/#components","title":"Components","text":"<ol> <li>Document Indexer</li> <li>Processes and indexes documents</li> <li> <p>Creates searchable representations</p> </li> <li> <p>Retriever</p> </li> <li>Searches for relevant information</li> <li> <p>Ranks and filters results</p> </li> <li> <p>Generator</p> </li> <li>Combines retrieved information</li> <li>Generates coherent responses</li> </ol>"},{"location":"user-guide/core-concepts/#flow","title":"Flow","text":"<pre><code>graph LR\n    A[Input Query] --&gt; B[Retriever]\n    B --&gt; C[Context Selection]\n    C --&gt; D[Generator]\n    D --&gt; E[Response]\n</code></pre>"},{"location":"user-guide/core-concepts/#error-handling","title":"Error Handling","text":"<p>Empire Chain uses a hierarchical error system:</p> <pre><code>from empire_chain.exceptions import (\n    EmpireChainError,\n    DocumentError,\n    ModelError,\n    ConfigError\n)\n</code></pre>"},{"location":"user-guide/core-concepts/#configuration-system","title":"Configuration System","text":""},{"location":"user-guide/core-concepts/#levels-of-configuration","title":"Levels of Configuration","text":"<ol> <li>Global Configuration</li> <li>System-wide settings</li> <li> <p>Default behaviors</p> </li> <li> <p>Component Configuration</p> </li> <li>Component-specific settings</li> <li> <p>Override capabilities</p> </li> <li> <p>Runtime Configuration</p> </li> <li>Dynamic settings</li> <li>Session-specific overrides</li> </ol>"},{"location":"user-guide/core-concepts/#event-system","title":"Event System","text":"<p>The event system allows for:</p> <ul> <li>Progress monitoring</li> <li>Status updates</li> <li>Error tracking</li> <li>Custom callbacks</li> </ul> <pre><code>from empire_chain.events import EventHandler\n\ndef on_document_processed(event):\n    print(f\"Processed: {event.document_id}\")\n\nhandler = EventHandler()\nhandler.subscribe(\"document_processed\", on_document_processed)\n</code></pre>"},{"location":"user-guide/core-concepts/#extension-system","title":"Extension System","text":"<p>Empire Chain can be extended through:</p> <ol> <li>Custom Processors</li> <li>Model Adapters</li> <li>Pipeline Stages</li> <li>Visualization Components</li> </ol> <p>Example of a custom processor:</p> <pre><code>from empire_chain.processors import BaseProcessor\n\nclass CustomProcessor(BaseProcessor):\n    def process(self, document):\n        # Custom processing logic\n        return processed_document\n</code></pre>"},{"location":"user-guide/document-processing/","title":"Document Processing","text":""},{"location":"user-guide/document-processing/#overview","title":"Overview","text":"<p>Empire Chain provides powerful document processing capabilities through its <code>Docling</code> module. This guide covers how to process different types of documents and extract meaningful information from them.</p>"},{"location":"user-guide/document-processing/#supported-document-types","title":"Supported Document Types","text":"<ul> <li>PDF Documents</li> <li>Text Files</li> <li>Images (with OCR)</li> <li>Word Documents</li> <li>HTML Pages</li> </ul>"},{"location":"user-guide/document-processing/#basic-document-processing","title":"Basic Document Processing","text":""},{"location":"user-guide/document-processing/#loading-documents","title":"Loading Documents","text":"<pre><code>from empire_chain.docling import Docling\n\n# Load a PDF document\npdf_doc = Docling(\"document.pdf\")\n\n# Load a text file\ntext_doc = Docling(\"document.txt\")\n\n# Load from bytes\ndoc = Docling(bytes_content, content_type=\"application/pdf\")\n</code></pre>"},{"location":"user-guide/document-processing/#text-extraction","title":"Text Extraction","text":"<pre><code># Extract all text\ntext = doc.extract_text()\n\n# Extract text from specific pages\ntext = doc.extract_text(pages=[1, 3, 5])\n\n# Extract with layout preservation\ntext = doc.extract_text(preserve_layout=True)\n</code></pre>"},{"location":"user-guide/document-processing/#document-analysis","title":"Document Analysis","text":"<pre><code># Get document metadata\nmetadata = doc.get_metadata()\n\n# Analyze document structure\nstructure = doc.analyze_structure()\n\n# Extract tables\ntables = doc.extract_tables()\n</code></pre>"},{"location":"user-guide/document-processing/#advanced-features","title":"Advanced Features","text":""},{"location":"user-guide/document-processing/#ocr-processing","title":"OCR Processing","text":"<pre><code># Enable OCR for image-based PDFs\ndoc = Docling(\"scanned.pdf\", config={\"ocr_enabled\": True})\n\n# Extract text with OCR\ntext = doc.extract_text()\n</code></pre>"},{"location":"user-guide/document-processing/#document-transformation","title":"Document Transformation","text":"<pre><code># Convert to different format\ndoc.convert_to(\"docx\")\n\n# Split document\ndoc.split(pages=[1, 3, 5])\n\n# Merge documents\nDocling.merge([\"doc1.pdf\", \"doc2.pdf\"], output=\"merged.pdf\")\n</code></pre>"},{"location":"user-guide/document-processing/#content-extraction","title":"Content Extraction","text":"<pre><code># Extract images\nimages = doc.extract_images()\n\n# Extract tables to pandas DataFrame\ntables = doc.extract_tables(output_format=\"pandas\")\n\n# Extract specific regions\ncontent = doc.extract_region(bbox=(100, 100, 500, 500))\n</code></pre>"},{"location":"user-guide/document-processing/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Memory Management <pre><code>with Docling(\"large.pdf\") as doc:\n    text = doc.extract_text()\n</code></pre></p> </li> <li> <p>Error Handling <pre><code>try:\n    doc = Docling(\"document.pdf\")\n    text = doc.extract_text()\nexcept DocumentError as e:\n    print(f\"Error processing document: {e}\")\n</code></pre></p> </li> <li> <p>Batch Processing <pre><code>from empire_chain.docling import BatchProcessor\n\nprocessor = BatchProcessor()\nresults = processor.process_directory(\"docs/\")\n</code></pre></p> </li> </ol>"},{"location":"user-guide/document-processing/#configuration-options","title":"Configuration Options","text":"<pre><code>config = {\n    \"ocr\": {\n        \"enabled\": True,\n        \"language\": \"eng\",\n        \"dpi\": 300\n    },\n    \"extraction\": {\n        \"preserve_layout\": True,\n        \"include_images\": False\n    },\n    \"processing\": {\n        \"chunk_size\": 1000,\n        \"max_workers\": 4\n    }\n}\n\ndoc = Docling(\"document.pdf\", config=config)\n</code></pre>"},{"location":"user-guide/llm-integration/","title":"LLM Integration","text":""},{"location":"user-guide/llm-integration/#overview","title":"Overview","text":"<p>Empire Chain provides seamless integration with various Large Language Models (LLMs). This guide covers how to use different LLMs, configure them, and build applications with them.</p>"},{"location":"user-guide/llm-integration/#supported-models","title":"Supported Models","text":"<ul> <li>OpenAI GPT Models</li> <li>Anthropic Claude</li> <li>Local Models (via HuggingFace)</li> <li>Custom Model Integration</li> </ul>"},{"location":"user-guide/llm-integration/#basic-usage","title":"Basic Usage","text":""},{"location":"user-guide/llm-integration/#setting-up","title":"Setting Up","text":"<pre><code>from empire_chain.docling import LLMHandler\n\n# Initialize with OpenAI\nllm = LLMHandler(provider=\"openai\")\n\n# Initialize with Anthropic\nllm = LLMHandler(provider=\"anthropic\")\n\n# Initialize with local model\nllm = LLMHandler(\n    provider=\"local\",\n    model_path=\"path/to/model\"\n)\n</code></pre>"},{"location":"user-guide/llm-integration/#simple-queries","title":"Simple Queries","text":"<pre><code># Basic completion\nresponse = llm.complete(\"Tell me about AI\")\n\n# Chat completion\nmessages = [\n    {\"role\": \"user\", \"content\": \"What is machine learning?\"}\n]\nresponse = llm.chat(messages)\n</code></pre>"},{"location":"user-guide/llm-integration/#advanced-features","title":"Advanced Features","text":""},{"location":"user-guide/llm-integration/#model-configuration","title":"Model Configuration","text":"<pre><code>config = {\n    \"model\": \"gpt-4\",\n    \"temperature\": 0.7,\n    \"max_tokens\": 150,\n    \"top_p\": 1,\n    \"frequency_penalty\": 0,\n    \"presence_penalty\": 0\n}\n\nllm = LLMHandler(provider=\"openai\", config=config)\n</code></pre>"},{"location":"user-guide/llm-integration/#streaming-responses","title":"Streaming Responses","text":"<pre><code>for chunk in llm.stream(\"Tell me a story\"):\n    print(chunk, end=\"\", flush=True)\n</code></pre>"},{"location":"user-guide/llm-integration/#function-calling","title":"Function Calling","text":"<pre><code>functions = [{\n    \"name\": \"get_weather\",\n    \"description\": \"Get weather information\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"location\": {\"type\": \"string\"},\n            \"unit\": {\"type\": \"string\"}\n        }\n    }\n}]\n\nresponse = llm.chat(\n    messages=[{\"role\": \"user\", \"content\": \"What's the weather in London?\"}],\n    functions=functions\n)\n</code></pre>"},{"location":"user-guide/llm-integration/#integration-patterns","title":"Integration Patterns","text":""},{"location":"user-guide/llm-integration/#rag-implementation","title":"RAG Implementation","text":"<pre><code>from empire_chain.docling import RAGSystem\n\n# Initialize RAG with specific LLM\nrag = RAGSystem(llm_handler=llm)\n\n# Add documents\nrag.add_documents([\"doc1.pdf\", \"doc2.pdf\"])\n\n# Query with context\nresponse = rag.query(\"What do the documents say about AI?\")\n</code></pre>"},{"location":"user-guide/llm-integration/#chain-of-thought","title":"Chain of Thought","text":"<pre><code>prompt = \"\"\"\nQuestion: {question}\nLet's approach this step by step:\n1) First, let's understand what we're asked\n2) Then, break down the problem\n3) Finally, provide the solution\n\"\"\"\n\nresponse = llm.complete(\n    prompt.format(question=\"How does photosynthesis work?\"),\n    temperature=0.3\n)\n</code></pre>"},{"location":"user-guide/llm-integration/#agent-implementation","title":"Agent Implementation","text":"<pre><code>from empire_chain.docling import Agent\n\n# Create an agent with tools\nagent = Agent(\n    llm_handler=llm,\n    tools=[\n        \"calculator\",\n        \"web_search\",\n        \"code_executor\"\n    ]\n)\n\n# Run agent\nresult = agent.run(\"Calculate the compound interest on $1000\")\n</code></pre>"},{"location":"user-guide/llm-integration/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/llm-integration/#error-handling","title":"Error Handling","text":"<pre><code>from empire_chain.exceptions import LLMError\n\ntry:\n    response = llm.complete(\"Generate text\")\nexcept LLMError as e:\n    print(f\"LLM Error: {e}\")\nexcept Exception as e:\n    print(f\"Unexpected error: {e}\")\n</code></pre>"},{"location":"user-guide/llm-integration/#rate-limiting","title":"Rate Limiting","text":"<pre><code>llm = LLMHandler(\n    provider=\"openai\",\n    config={\n        \"rate_limit\": {\n            \"requests_per_minute\": 60,\n            \"tokens_per_minute\": 40000\n        }\n    }\n)\n</code></pre>"},{"location":"user-guide/llm-integration/#caching","title":"Caching","text":"<pre><code>llm = LLMHandler(\n    provider=\"openai\",\n    config={\n        \"cache\": {\n            \"enabled\": True,\n            \"ttl\": 3600,  # 1 hour\n            \"max_size\": 1000\n        }\n    }\n)\n</code></pre>"},{"location":"user-guide/llm-integration/#model-comparison","title":"Model Comparison","text":"Provider Strengths Use Cases OpenAI State-of-the-art performance General purpose, code generation Anthropic Long context, reasoning Document analysis, complex tasks Local Privacy, no latency Edge deployment, offline use"},{"location":"user-guide/llm-integration/#security-considerations","title":"Security Considerations","text":"<ol> <li> <p>API Key Management <pre><code># Use environment variables\nimport os\nllm = LLMHandler(\n    provider=\"openai\",\n    api_key=os.getenv(\"OPENAI_API_KEY\")\n)\n</code></pre></p> </li> <li> <p>Content Filtering ```python llm = LLMHandler(     provider=\"openai\",     config={         \"content_filter\": {             \"enabled\": True,             \"level\": \"strict\"         }     } ) </p> </li> </ol>"},{"location":"user-guide/visualization/","title":"Visualization","text":""},{"location":"user-guide/visualization/#overview","title":"Overview","text":"<p>Empire Chain provides powerful visualization capabilities through its <code>visualizer</code> module. This guide covers how to create various types of visualizations for your data and AI pipeline results.</p>"},{"location":"user-guide/visualization/#basic-visualizations","title":"Basic Visualizations","text":""},{"location":"user-guide/visualization/#data-plots","title":"Data Plots","text":"<pre><code>from empire_chain.visualizer import DataVisualizer\nimport pandas as pd\n\n# Create sample data\ndata = pd.DataFrame({\n    'x': range(10),\n    'y': [x**2 for x in range(10)]\n})\n\n# Initialize visualizer\nviz = DataVisualizer(data)\n\n# Create different types of plots\nviz.line_plot('x', 'y', title='Square Function')\nviz.scatter_plot('x', 'y', title='Data Points')\nviz.bar_plot('x', 'y', title='Bar Chart')\n</code></pre>"},{"location":"user-guide/visualization/#interactive-plots","title":"Interactive Plots","text":"<pre><code># Create interactive plot\nviz.interactive_plot(\n    'x', 'y',\n    plot_type='line',\n    hover_data=['x', 'y']\n)\n\n# Create dashboard\nviz.create_dashboard([\n    ('line', {'x': 'x', 'y': 'y'}),\n    ('scatter', {'x': 'x', 'y': 'y'})\n])\n</code></pre>"},{"location":"user-guide/visualization/#ai-pipeline-visualization","title":"AI Pipeline Visualization","text":""},{"location":"user-guide/visualization/#rag-visualization","title":"RAG Visualization","text":"<pre><code>from empire_chain.visualizer import RAGVisualizer\n\n# Initialize RAG visualizer\nrag_viz = RAGVisualizer(rag_system)\n\n# Visualize retrieval process\nrag_viz.show_retrieval_path()\n\n# Visualize document similarities\nrag_viz.plot_document_similarities()\n\n# Show attention heatmap\nrag_viz.attention_heatmap()\n</code></pre>"},{"location":"user-guide/visualization/#model-performance","title":"Model Performance","text":"<pre><code>from empire_chain.visualizer import ModelVisualizer\n\n# Initialize model visualizer\nmodel_viz = ModelVisualizer(model)\n\n# Plot training metrics\nmodel_viz.plot_training_history()\n\n# Show confusion matrix\nmodel_viz.confusion_matrix()\n\n# Plot attention weights\nmodel_viz.attention_weights()\n</code></pre>"},{"location":"user-guide/visualization/#advanced-features","title":"Advanced Features","text":""},{"location":"user-guide/visualization/#custom-styling","title":"Custom Styling","text":"<pre><code># Set global style\nviz.set_style({\n    'theme': 'dark',\n    'color_palette': ['#FF0000', '#00FF00', '#0000FF'],\n    'font_family': 'Arial',\n    'font_size': 12\n})\n\n# Apply to specific plot\nviz.line_plot(\n    'x', 'y',\n    style={\n        'line_color': '#FF0000',\n        'line_width': 2,\n        'marker_size': 8\n    }\n)\n</code></pre>"},{"location":"user-guide/visualization/#animation","title":"Animation","text":"<pre><code># Create animated plot\nviz.animate_plot(\n    'x', 'y',\n    frames=range(10),\n    title='Animation'\n)\n\n# Save animation\nviz.save_animation('animation.gif')\n</code></pre>"},{"location":"user-guide/visualization/#export-options","title":"Export Options","text":"<pre><code># Save as static image\nviz.save_plot('plot.png', dpi=300)\n\n# Export as interactive HTML\nviz.export_interactive('plot.html')\n\n# Export dashboard\nviz.export_dashboard('dashboard.html')\n</code></pre>"},{"location":"user-guide/visualization/#streamlit-integration","title":"Streamlit Integration","text":"<pre><code>from empire_chain.visualizer import StreamlitVisualizer\nimport streamlit as st\n\n# Initialize Streamlit visualizer\nst_viz = StreamlitVisualizer()\n\n# Create interactive components\nst_viz.plot_with_controls(\n    data,\n    x_column='x',\n    y_column='y',\n    plot_types=['line', 'scatter', 'bar']\n)\n\n# Create metrics dashboard\nst_viz.metrics_dashboard({\n    'Accuracy': 0.95,\n    'Precision': 0.92,\n    'Recall': 0.89\n})\n</code></pre>"},{"location":"user-guide/visualization/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/visualization/#memory-management","title":"Memory Management","text":"<pre><code># Handle large datasets\nviz.enable_chunking(chunk_size=1000)\n\n# Clear memory\nviz.clear_cache()\n</code></pre>"},{"location":"user-guide/visualization/#performance-optimization","title":"Performance Optimization","text":"<pre><code># Enable GPU acceleration\nviz.enable_gpu()\n\n# Use downsampling for large datasets\nviz.downsample(factor=0.1)\n</code></pre>"},{"location":"user-guide/visualization/#responsive-design","title":"Responsive Design","text":"<pre><code># Make plots responsive\nviz.set_responsive(True)\n\n# Set breakpoints\nviz.set_breakpoints({\n    'sm': 576,\n    'md': 768,\n    'lg': 992,\n    'xl': 1200\n})\n</code></pre>"},{"location":"user-guide/visualization/#examples","title":"Examples","text":""},{"location":"user-guide/visualization/#complex-dashboard","title":"Complex Dashboard","text":"<pre><code># Create multi-panel dashboard\nviz.create_complex_dashboard({\n    'top': [\n        ('metrics', {'values': {'Accuracy': 0.95}}),\n        ('line', {'x': 'x', 'y': 'y'})\n    ],\n    'bottom': [\n        ('heatmap', {'data': correlation_matrix}),\n        ('scatter', {'x': 'x', 'y': 'y'})\n    ]\n})\n</code></pre>"},{"location":"user-guide/visualization/#custom-visualization","title":"Custom Visualization","text":"<pre><code>from empire_chain.visualizer import BaseVisualizer\n\nclass CustomVisualizer(BaseVisualizer):\n    def custom_plot(self, data, **kwargs):\n        # Custom visualization logic\n        pass\n\n# Use custom visualizer\ncustom_viz = CustomVisualizer()\ncustom_viz.custom_plot(data)\n</code></pre>"}]}